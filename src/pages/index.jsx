import Head from "next/head";
import {
  Button,
  Container,
  FormControl,
  FormLabel,
  Img,
  Input,
  Spinner,
  Table,
  TableContainer,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  VStack,
  useDisclosure,
  useToast,
} from "@chakra-ui/react";
import { useFetchBooks } from "@/features/book/useFetchBooks";
import { useFormik } from "formik";
import { useCreateBook } from "@/features/book/useCreateBook";
import { useDeleteBook } from "@/features/book/useDeleteBook";
import ConfirmDelete from "@/features/book/ConfirmDelete";
import ConfirmUpdate from "@/features/book/ConfirmUpdate";

export default function Home() {
  const {
    data,
    isLoading: booksIsLoading,
    refetch: refetchBooks,
  } = useFetchBooks();

  const toast = useToast();

  const formik = useFormik({
    initialValues: {
      judul: "", //inisial nilai dan akan diubah ketika diinput
      pengarang: "",
      kategori: "",
      cover: "",
    },
    onSubmit: () => {
      const { judul, pengarang, kategori, cover } = formik.values;
      // Mutate akan menjadi argumen body
      createBook({
        judul, // = judul: judul
        pengarang,
        kategori,
        cover,
      });

      formik.setFieldValue("judul", "");
      formik.setFieldValue("pengarang", "");
      formik.setFieldValue("kategori", "");
      formik.setFieldValue("cover", "");

      toast({
        title: "Buku Telah Ditambahkan",
        status: "success",
        position: "top-right",
        duration: 1000,
      });
    },
  });

  const { mutate: createBook, isLoading: createBookIsLoading } = useCreateBook({
    onSuccess: () => {
      refetchBooks();
    },
  });

  // const { mutate: deleteBook } = useDeleteBook({
  //   onSuccess: () => {
  //     toast({
  //       title: "buku berhasil dihapus",
  //       status: "success",
  //       position: "top-right",
  //       duration: 1000,
  //     });
  //     refetchBooks();
  //   },
  // });

  const handleFormInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value);
  };

  // const confirmDelete = (idBook) => {
  //   const shouldDelete = confirm("Hapus Data?");

  //   if (shouldDelete) {
  //     deleteBook(idBook);
  //   }
  // };

  const renderBook = () => {
    return data?.data.Data.map((book, index) => {
      return (
        <Tr key={book.id}>
          <Td>{index + 1}</Td>
          <Td>{book.judul}</Td>
          <Td>{book.pengarang}</Td>
          <Td>{book.kategori}</Td>
          <Td>
            <Img src={book.cover} alt={book.judul} />
          </Td>
          <Td>
            <ConfirmUpdate data={book} />
            <ConfirmDelete id={book.id} />
          </Td>
        </Tr>
      );
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container maxW={"1050px"} marginTop={"15px"} paddingBottom={"20px"}>
          <TableContainer mb={"50px"}>
            <Table size={"sm"} marginTop={"20px"}>
              <Thead>
                <Tr>
                  <Th>NO</Th>
                  <Th>JUDUL</Th>
                  <Th>PENGARANG</Th>
                  <Th>KATEGORI</Th>
                  <Th>COVER</Th>
                  <Th>Aksi</Th>
                </Tr>
              </Thead>
              <Tbody>
                {renderBook()}
                {/**Kalo true jalani spinner */}
                {/* {isLoading ? <Spinner /> : false}{" "} */}
                {/**Sama aja tapi kalo false tidak bisa dicustom mau gimana */}
                {booksIsLoading && <Spinner />}
              </Tbody>
            </Table>
          </TableContainer>

          <form onSubmit={formik.handleSubmit}>
            <VStack spacing={"4"}>
              <FormControl>
                <FormLabel>Judul</FormLabel>
                <Input
                  onChange={handleFormInput}
                  name="judul"
                  value={formik.values.judul}
                  required
                />
              </FormControl>

              <FormControl>
                <FormLabel>Pengarang</FormLabel>
                <Input
                  onChange={handleFormInput}
                  name="pengarang"
                  value={formik.values.pengarang}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Kategori</FormLabel>
                <Input
                  onChange={handleFormInput}
                  name="kategori"
                  value={formik.values.kategori}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Cover</FormLabel>
                <Input
                  onChange={handleFormInput}
                  name="cover"
                  value={formik.values.cover}
                />
              </FormControl>

              {createBookIsLoading ? (
                <Spinner />
              ) : (
                <Button type="submit" padding={"20px"}>
                  Submit
                </Button>
              )}
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
